// Code generated by "goconfig -type CommentThreshold uint,NeedFunc bool,NeedVar bool -option -configOption Option -output extract_config_generated.go"; DO NOT EDIT.

package main

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	CommentThreshold *ConfigItem[uint]
	NeedFunc         *ConfigItem[bool]
	NeedVar          *ConfigItem[bool]
}
type ConfigBuilder struct {
	commentThreshold uint
	needFunc         bool
	needVar          bool
}

func (s *ConfigBuilder) CommentThreshold(v uint) *ConfigBuilder {
	s.commentThreshold = v
	return s
}
func (s *ConfigBuilder) NeedFunc(v bool) *ConfigBuilder {
	s.needFunc = v
	return s
}
func (s *ConfigBuilder) NeedVar(v bool) *ConfigBuilder {
	s.needVar = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		CommentThreshold: NewConfigItem(s.commentThreshold),
		NeedFunc:         NewConfigItem(s.needFunc),
		NeedVar:          NewConfigItem(s.needVar),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...Option) {
	for _, x := range opt {
		x(s)
	}
}

type Option func(*Config)

func WithCommentThreshold(v uint) Option {
	return func(c *Config) {
		c.CommentThreshold.Set(v)
	}
}
func WithNeedFunc(v bool) Option {
	return func(c *Config) {
		c.NeedFunc.Set(v)
	}
}
func WithNeedVar(v bool) Option {
	return func(c *Config) {
		c.NeedVar.Set(v)
	}
}
